%{ 	 
#include <stdio.h>
#include <string.h>
#include "y.tab.h"
int num_lines = 0;
%} 

%option noyywrap
%option caseless

DIGIT [0-9]
WORD \"[a-zA-Z0-9]*\"
NUMBER [+-]?[1-9][0-9]*|0$
CHARACTER \'[a-zA-Z0-9]\'
BOOLEAN true|false
const {WORD}|{NUMBER}|{CHARACTER}|{BOOLEAN}|{DIGIT}
id [a-zA-Z][a-zA-Z0-9_]*
COMENT \/\/.*\n

%%
start>[ \t]*(\r\n|\n) {printf( "Reserved word: %s\n", yytext); return START_ID;}
{COMENT} {printf("Comment\n");}

and {printf("Reserved word: %s\n", yytext); return AND;}
array {printf( "Reserved word: %s\n", yytext); return ARRAY;}
else {printf( "Reserved word: %s\n", yytext); return ELSE;}
for	{printf( "Reserved word: %s\n", yytext); return FOR;}
int {printf( "Reserved word: %s\n", yytext); return INTEGER;}
or {printf( "Reserved word: %s\n", yytext); return OR;}
read_val {printf( "Reserved word: %s\n", yytext); return READ_VAL;}
string {printf( "Reserved word: %s\n", yytext); return STRING;}
from {printf( "Reserved word: %s\n", yytext); return FOR_FROM;}
While {printf( "Reserved word: %s\n", yytext); return WHILE;}
In_case	{printf( "Reserved word: %s\n", yytext); return IN_CASE;}
divides	{printf( "Reserved word: %s\n", yytext);return DIVIDES;}
increment {printf( "Reserved word: %s\n", yytext); return INCREMENT;}
show {printf( "Reserved word: %s\n", yytext); return SHOW;}

[ \t]*<end[ \t\n\r]* {printf( "Reserved word: %s\n", yytext); return END_ID;}

{id} {printf( "Identifier: %s\n", yytext); return ID;}
{const}	{printf( "Constant: %s\n", yytext); return CONST;}

":" {printf( "Separator: %s\n", yytext ); return COLON;}
";" {printf( "Separator: %s\n", yytext ); return SEMI_COLON;}
"," {printf( "Separator: %s\n", yytext ); return COMMA;}
"." {printf( "Separator: %s\n", yytext ); return DOT;}
"{" {printf( "Separator: %s\n", yytext ); return OPEN_CURLY_BRACKET;}
"}" {printf( "Separator: %s\n", yytext ); return CLOSED_CURLY_BRACKET;}
"(" {printf( "Separator: %s\n", yytext ); return OPEN_ROUND_BRACKET;}
")" {printf( "Separator: %s\n", yytext ); return CLOSED_ROUND_BRACKET;}
"[" {printf( "Separator: %s\n", yytext ); return OPEN_RIGHT_BRACKET;}
"]" {printf( "Separator: %s\n", yytext ); return CLOSED_RIGHT_BRACKET;}
"+" {printf( "Operator: %s\n", yytext ); return PLUS;}
"-" {printf( "Operator: %s\n", yytext ); return MINUS;}
"*" {printf( "Operator: %s\n", yytext ); return MUL;}
"/" {printf( "Operator: %s\n", yytext ); return DIV;}
"<" {printf( "Operator: %s\n", yytext ); return LT;}
">" {printf( "Operator: %s\n", yytext ); return GT;}
"<=" {printf( "Operator: %s\n", yytext ); return LE;}
">=" {printf( "Operator: %s\n", yytext ); return GE;}
"!=" {printf( "Operator: %s\n", yytext ); return NE;}
"==" {printf( "Operator: %s\n", yytext ); return EQ;}
"=" {printf( "Separator: %s\n", yytext ); return ATRIB;}
"!" {printf( "Operator: %s\n", yytext ); return NOT;}

[ \t\v\f]+
[\r\n|\n]+ {num_lines++; printf("\n"); return NEW_LINE;}
. {printf("Illegal character at line %d: %s\n", num_lines, yytext); return -1;}

%%